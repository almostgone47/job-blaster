datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum JobStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum AppStatus {
  DRAFT
  APPLIED
  INTERVIEW
  OA
  OFFER
  REJECTED
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  resumes      Resume[]
  jobs         Job[]
  applications Application[]
  templates    Template[]
  interviews   Interview[]
}

model Resume {
  id           String        @id @default(cuid())
  userId       String
  name         String
  fileUrl      String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Job {
  id             String        @id @default(cuid())
  userId         String
  title          String
  company        String
  url            String
  source         String?
  location       String?
  salary         String?
  tags           String[]
  status         JobStatus     @default(SAVED)
  faviconUrl     String?
  notes          String?
  deadline       DateTime?
  lastActivityAt DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications   Application[]
  interviews     Interview[]

  @@index([userId, status, createdAt])
  @@index([userId, lastActivityAt])
  @@index([userId, deadline])
}

model Application {
  id         String    @id @default(cuid())
  userId     String
  jobId      String
  resumeId   String?
  coverNote  String?
  status     AppStatus @default(APPLIED)
  appliedAt  DateTime?
  nextAction DateTime?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resume     Resume?   @relation(fields: [resumeId], references: [id])
  interviews Interview[]

  @@index([userId, nextAction])
  @@index([userId, status])
}

model Template {
  id        String   @id @default(cuid())
  userId    String
  name      String
  body      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  applicationId String?
  title       String   // e.g., "Technical Interview", "Phone Screen"
  type        InterviewType
  scheduledAt DateTime
  duration    Int      // in minutes
  location    String?  // physical location or video call link
  participants String? // interviewer names or meeting details
  notes       String?
  status      InterviewStatus @default(SCHEDULED)
  reminderAt  DateTime? // when to send reminder
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id])

  @@index([userId, scheduledAt])
  @@index([userId, status])
  @@index([jobId])
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  ONSITE
  FINAL_ROUND
  OTHER
}

enum InterviewStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}
