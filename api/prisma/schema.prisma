generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  applications  Application[]
  interviews    Interview[]
  jobs          Job[]
  resumes       Resume[]
  salaryHistory SalaryHistory[]
  salaryOffers  SalaryOffer[]
  templates     Template[]
  companyResearch CompanyResearch[]
}

model Resume {
  id           String        @id @default(cuid())
  userId       String
  name         String
  fileUrl      String
  createdAt    DateTime      @default(now())
  applications Application[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id              String          @id @default(cuid())
  userId          String
  title           String
  company         String
  url             String
  source          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deadline        DateTime?
  faviconUrl      String?
  lastActivityAt  DateTime        @default(now())
  location        String?
  notes           String?
  salary          String?
  status          JobStatus       @default(SAVED)
  tags            String[]
  isRemote        Boolean         @default(false)
  locationCity    String?
  locationCountry String?
  locationState   String?
  postedAt        DateTime?
  salaryCurrency  String          @default("USD")
  salaryMax       Int?
  salaryMin       Int?
  salaryType      SalaryType      @default(ANNUAL)
  applications    Application[]
  interviews      Interview[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  salaryHistory   SalaryHistory[]
  salaryOffers    SalaryOffer[]

  @@index([userId, status, createdAt])
  @@index([userId, lastActivityAt])
  @@index([userId, deadline])
  @@index([userId, salaryMin])
  @@index([userId, salaryMax])
  @@index([userId, salaryMin, salaryMax]) // Composite index for salary queries
  @@index([userId, locationCity])
  @@index([userId, locationState])
  @@index([userId, isRemote])
}

model Application {
  id           String        @id @default(cuid())
  userId       String
  jobId        String
  resumeId     String?
  coverNote    String?
  status       AppStatus     @default(APPLIED)
  appliedAt    DateTime?
  nextAction   DateTime?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  job          Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resume       Resume?       @relation(fields: [resumeId], references: [id])
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews   Interview[]
  salaryOffers SalaryOffer[]

  @@index([userId, nextAction])
  @@index([userId, status])
}

model Template {
  id        String   @id @default(cuid())
  userId    String
  name      String
  body      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id            String          @id @default(cuid())
  userId        String
  jobId         String
  applicationId String?
  title         String
  type          InterviewType
  scheduledAt   DateTime
  duration      Int
  location      String?
  participants  String?
  notes         String?
  status        InterviewStatus @default(SCHEDULED)
  reminderAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  application   Application?    @relation(fields: [applicationId], references: [id])
  job           Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, scheduledAt])
  @@index([userId, status])
  @@index([jobId])
}

model SalaryOffer {
  id            String       @id @default(cuid())
  userId        String
  jobId         String
  applicationId String?
  amount        Int
  currency      String       @default("USD")
  type          SalaryType   @default(ANNUAL)
  status        OfferStatus  @default(PENDING)
  offeredAt     DateTime     @default(now())
  expiresAt     DateTime?
  notes         String?
  benefits      String[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  application   Application? @relation(fields: [applicationId], references: [id])
  job           Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, offeredAt])
  @@index([jobId])
  @@index([userId, jobId]) // Composite index for faster joins
}

model SalaryHistory {
  id            String     @id @default(cuid())
  userId        String
  jobId         String
  amount        Int
  currency      String     @default("USD")
  type          SalaryType @default(ANNUAL)
  effectiveDate DateTime   @default(now())
  changeType    String
  notes         String?
  createdAt     DateTime   @default(now())
  job           Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, effectiveDate])
  @@index([jobId])
}

model CompanyResearch {
  id          String   @id @default(cuid())
  userId      String
  companyName String   // Normalized company name
  insights    String   // Research notes, culture, benefits, etc.
  rating      Int?     // 1-5 rating
  pros        String[] // Array of pros
  cons        String[] // Array of cons
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyName])
  @@index([userId, companyName])
}



enum JobStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum AppStatus {
  DRAFT
  APPLIED
  INTERVIEW
  OA
  OFFER
  REJECTED
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  ONSITE
  FINAL_ROUND
  OTHER
}

enum InterviewStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum SalaryType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  ANNUAL
  PROJECT_BASED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  NEGOTIATING
  EXPIRED
}
