import type {SalaryStats, CompanySalaryData} from '../lib/salaryAnalytics';

export interface ExportData {
  stats: SalaryStats;
  companies: CompanySalaryData[];
  offers: any[];
}

export function generateMarkdown(data: ExportData): string {
  const {stats, companies, offers} = data;

  let markdown = `# Salary Analytics Summary\n\n`;
  markdown += `Generated on ${new Date().toLocaleDateString()}\n\n`;

  // Headline Stats
  markdown += `## 📊 Headline Statistics\n\n`;
  markdown += `- **Total Jobs:** ${stats.totalJobs}\n`;
  markdown += `- **Total Offers:** ${stats.totalOffers}\n`;
  markdown += `- **Average Salary:** $${Math.round(
    stats.averageSalary / 1000,
  )}k\n`;
  markdown += `- **Median Salary:** $${Math.round(
    stats.medianSalary / 1000,
  )}k\n`;
  markdown += `- **Salary Range:** $${Math.round(
    stats.minSalary / 1000,
  )}k - $${Math.round(stats.maxSalary / 1000)}k\n`;
  markdown += `- **25th Percentile:** $${Math.round(stats.p25 / 1000)}k\n`;
  markdown += `- **75th Percentile:** $${Math.round(stats.p75 / 1000)}k\n`;
  markdown += `- **90th Percentile:** $${Math.round(stats.p90 / 1000)}k\n\n`;

  // Company Leaderboard (Top 5)
  if (companies.length > 0) {
    markdown += `## 🏢 Company Leaderboard (Top 5)\n\n`;
    markdown += `| Company | Offers | Average Salary | Range |\n`;
    markdown += `|---------|--------|----------------|-------|\n`;

    companies.slice(0, 5).forEach((company) => {
      const range = `$${Math.round(company.minSalary / 1000)}k - $${Math.round(
        company.maxSalary / 1000,
      )}k`;
      markdown += `| ${company.company} | ${
        company.offer_count
      } | $${Math.round(company.avgSalary / 1000)}k | ${range} |\n`;
    });
    markdown += `\n`;
  }

  // Recent Offers
  if (offers.length > 0) {
    markdown += `## 💰 Recent Offers\n\n`;
    markdown += `| Job Title | Company | Location | Amount |\n`;
    markdown += `|------------|---------|----------|--------|\n`;

    offers.slice(0, 10).forEach((offer) => {
      const job = offer.job || {};
      const title = job.title || 'N/A';
      const company = job.company || 'N/A';
      const location = job.location || 'N/A';
      const amount = `$${Math.round(offer.amount / 1000)}k`;

      markdown += `| ${title} | ${company} | ${location} | ${amount} |\n`;
    });
    markdown += `\n`;
  }

  // Insights
  markdown += `## 💡 Key Insights\n\n`;

  if (stats.averageSalary > stats.medianSalary) {
    markdown += `- You have several high outliers—use them to anchor negotiations\n`;
  } else {
    markdown += `- Most offers cluster below your typical target—consider raising the bar\n`;
  }

  if (stats.p75 - stats.medianSalary <= stats.medianSalary * 0.05) {
    markdown += `- Market looks tight; anchor closer to the top of your range\n`;
  }

  if (stats.totalOffers < 10) {
    markdown += `- Continue collecting offer data for more accurate analytics\n`;
  }

  markdown += `\n---\n`;
  markdown += `*This report was generated by Job Blaster Salary Analytics*\n`;

  return markdown;
}

export function generateCSV(data: ExportData): string {
  const {stats, companies, offers} = data;

  let csv = 'Category,Metric,Value\n';

  // Headline Stats
  csv += 'Headline Stats,Total Jobs,' + stats.totalJobs + '\n';
  csv += 'Headline Stats,Total Offers,' + stats.totalOffers + '\n';
  csv +=
    'Headline Stats,Average Salary,' +
    Math.round(stats.averageSalary / 1000) +
    'k\n';
  csv +=
    'Headline Stats,Median Salary,' +
    Math.round(stats.medianSalary / 1000) +
    'k\n';
  csv +=
    'Headline Stats,Min Salary,' + Math.round(stats.minSalary / 1000) + 'k\n';
  csv +=
    'Headline Stats,Max Salary,' + Math.round(stats.maxSalary / 1000) + 'k\n';
  csv +=
    'Headline Stats,25th Percentile,' + Math.round(stats.p25 / 1000) + 'k\n';
  csv +=
    'Headline Stats,75th Percentile,' + Math.round(stats.p75 / 1000) + 'k\n';
  csv +=
    'Headline Stats,90th Percentile,' + Math.round(stats.p90 / 1000) + 'k\n';

  // Company Leaderboard (Top 5)
  csv +=
    '\nCompany Leaderboard,Company,Offers,Average Salary,Min Salary,Max Salary\n';
  companies.slice(0, 5).forEach((company) => {
    csv += `Company Leaderboard,${company.company},${
      company.offer_count
    },${Math.round(company.avgSalary / 1000)}k,${Math.round(
      company.minSalary / 1000,
    )}k,${Math.round(company.maxSalary / 1000)}k\n`;
  });

  // Recent Offers
  csv += '\nRecent Offers,Job Title,Company,Location,Amount\n';
  offers.slice(0, 10).forEach((offer) => {
    const job = offer.job || {};
    const title = job.title || 'N/A';
    const company = job.company || 'N/A';
    const location = job.location || 'N/A';
    const amount = Math.round(offer.amount / 1000) + 'k';

    csv += `Recent Offers,${title},${company},${location},${amount}\n`;
  });

  return csv;
}

export function downloadFile(
  content: string,
  filename: string,
  mimeType: string,
): void {
  const blob = new Blob([content], {type: mimeType});
  const url = URL.createObjectURL(blob);

  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  URL.revokeObjectURL(url);
}
